/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SendMulti.java
 *
 * Created on Apr 26, 2010, 11:58:26 AM
 */
package comapp;

import communicator.DB.DBModel;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JInternalFrame;
import javax.swing.ProgressMonitor;

/**
 *
 * @author flyhigh
 */
public class SendMulti extends javax.swing.JInternalFrame {

    /** Creates new form SendMulti */
    DefaultListModel departmentListModel;
    DefaultListModel usersListModel;

    public SendMulti() {
        departmentListModel = new DefaultListModel();
        usersListModel = new DefaultListModel();
        populateListModel();
        initComponents();
    }

    void populateListModel() {
        departmentListModel.clear();
        ArrayList al = new DBModel().getDepartments();
        Iterator i = al.iterator();
        while (i.hasNext()) {
            departmentListModel.addElement((String) i.next());
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        departmentList = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageTextArea = new javax.swing.JTextArea();
        imCheckBox = new javax.swing.JCheckBox();
        smsCheckBox = new javax.swing.JCheckBox();
        countLabel = new javax.swing.JLabel();

        setClosable(true);
        setResizable(true);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(comapp.ComApp.class).getContext().getResourceMap(SendMulti.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        departmentList.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        departmentList.setModel(departmentListModel);
        departmentList.setName("departmentList"); // NOI18N
        jScrollPane3.setViewportView(departmentList);

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        userList.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        userList.setModel(usersListModel);
        userList.setName("userList"); // NOI18N
        userList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                userListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(userList);

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.setEnabled(false);
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton3.setEnabled(false);
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jSeparator1.setName("jSeparator1"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        messageTextArea.setColumns(20);
        messageTextArea.setRows(5);
        messageTextArea.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        messageTextArea.setName("messageTextArea"); // NOI18N
        messageTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                messageTextAreaKeyReleased(evt);
                messageTextAreaKeyReleased1(evt);
                messageTextAreaKeyReleased2(evt);
            }
        });
        jScrollPane1.setViewportView(messageTextArea);

        imCheckBox.setText(resourceMap.getString("imCheckBox.text")); // NOI18N
        imCheckBox.setEnabled(false);
        imCheckBox.setName("imCheckBox"); // NOI18N

        smsCheckBox.setText(resourceMap.getString("smsCheckBox.text")); // NOI18N
        smsCheckBox.setEnabled(false);
        smsCheckBox.setName("smsCheckBox"); // NOI18N

        countLabel.setText(resourceMap.getString("countLabel.text")); // NOI18N
        countLabel.setName("countLabel"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(55, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel3)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(countLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(imCheckBox)
                            .addComponent(smsCheckBox))
                        .addGap(60, 60, 60))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(imCheckBox)
                                .addGap(18, 18, 18)
                                .addComponent(smsCheckBox))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(countLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jLabel3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (departmentList.getSelectedValue() != null) {
            //new DBModel().getUsersByDepartment("asd");
            //departmentList.getSelectedValue().toString();
            ArrayList al = new DBModel().getUsersByDepartment(departmentList.getSelectedValue().toString());
            Iterator i = al.iterator();
            while (i.hasNext()) {
                Object o = i.next();
                ListObject lo = new ListObject(((String[]) o)[0], ((String[]) o)[1]);
                if (!usersListModel.contains(lo)) {
                    usersListModel.addElement(lo);
                }
            }
        //System.out.println(al.size());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (userList.getSelectedIndex() != -1) {
            usersListModel.remove(userList.getSelectedIndex());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void userListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_userListValueChanged
        // TODO add your handling code here:
        if (userList.getSelectedIndex() == -1) {
            jButton2.setEnabled(false);
        } else {
            jButton2.setEnabled(true);
        }
    }//GEN-LAST:event_userListValueChanged

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        final Enumeration e = usersListModel.elements();
            final Enumeration ee = usersListModel.elements();
            final int size = usersListModel.getSize();
            final JInternalFrame jif = new Status();
            //jif.set
            ComView.jDesktopPane1.add(jif);
            //add(jif);
            // this.setVisible(false);
            jif.setVisible(true);
        if (imCheckBox.isSelected()) {

            
            // jif.setFocusCycleRoot(true);
            java.awt.EventQueue.invokeLater(new Runnable() {

                public void run() {
                    int c = 0;
                    ProgressMonitor monitor = new ProgressMonitor(ComView.jDesktopPane1, "Sending..","", 0, size);
                    while (e.hasMoreElements()) {
                        try {
                            c++;
                            monitor.setProgress(c);
                            ListObject lo = (ListObject) e.nextElement();
                            String ip = new DBModel().getUserByEmpId(lo.getEmpId()).getIp();
                            ((Status) jif).setMessage(((Status) jif).getMessage() + "\nSending IM to " + ip + "\n\t");
                            Thread t = new SendMessage(ip, messageTextArea.getText().replace("\n",". "));
                            t.run();
                            try {
                                t.join();
                            } catch (InterruptedException ex) {
                                ex.printStackTrace();
                            }
                            ((Status) jif).setProgress((c / size) * 100);
                            Thread.sleep(500);
                            ((Status) jif).setMessage(((Status) jif).getMessage() + ((SendMessage) t).response);


                        } catch (InterruptedException ex) {
                            Logger.getLogger(SendMulti.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    
                }
            });

        //jif.setVisible(false);
        }
        if (smsCheckBox.isSelected()) {
            java.awt.EventQueue.invokeLater(new Runnable() {

                public void run() {
                    int c = 0;
                    ProgressMonitor monitor = new ProgressMonitor(ComView.jDesktopPane1, "Sending..","", 0, size);
                    while (ee.hasMoreElements()) {
                        try {
                            c++;
                            monitor.setProgress(c);
                            ListObject lo = (ListObject) ee.nextElement();
                            final String phone = new DBModel().getUserByEmpId(lo.getEmpId()).getPhone();
                            final String messageToSend = messageTextArea.getText();
                            ((Status) jif).setMessage(((Status) jif).getMessage() + "\nSending SMS to " + phone + "\n\t");
                            Runnable t = new Runnable() {

                                public void run() {
                                    GSMMessenger.getInstance().sendMessage(phone,messageToSend);
                                    
                                }
                            };
                            Thread myT = new Thread(t);
                            myT.run();
                            try {
                                //System.out.println("waiting for sms to send");
                                //myT.join(5000);
                            } catch (Exception ex) {
                                Logger.getLogger(SendMessageToUser.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            ((Status) jif).setProgress((c / size) * 100);
                            Thread.sleep(500);
                            ((Status) jif).setMessage(((Status) jif).getMessage() + GSMMessenger.response);
                             jif.revalidate();
                             jif.repaint();

                        } catch (InterruptedException ex) {
                            Logger.getLogger(SendMulti.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            });    
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void messageTextAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageTextAreaKeyReleased
        jButton3.setEnabled(messageNotEmpty());
        countLabel.setText(messageNotEmpty()?(158-messageTextArea.getText().length())+" characters left":"");
        if(messageTextArea.getText().length()>158){
            jButton3.setEnabled(false);
            countLabel.setText("Message length exceeds."+(messageTextArea.getText().length()-158)+" characters to be removed");
        }
    }//GEN-LAST:event_messageTextAreaKeyReleased

    private void messageTextAreaKeyReleased1(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageTextAreaKeyReleased1
        imCheckBox.setEnabled(messageNotEmpty());
    }//GEN-LAST:event_messageTextAreaKeyReleased1

    private void messageTextAreaKeyReleased2(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageTextAreaKeyReleased2
        smsCheckBox.setEnabled(messageNotEmpty());
    }//GEN-LAST:event_messageTextAreaKeyReleased2

    private boolean messageNotEmpty() {
        return messageTextArea.getText().trim().length() != 0;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel countLabel;
    private javax.swing.JList departmentList;
    private javax.swing.JCheckBox imCheckBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea messageTextArea;
    private javax.swing.JCheckBox smsCheckBox;
    private javax.swing.JList userList;
    // End of variables declaration//GEN-END:variables
}

class ListObject {

    protected String name;
    protected String empId;

    public ListObject(String name, String empName) {
        this.name = name;
        this.empId = empName;
    }

    /**
     * Get the value of empName
     *
     * @return the value of empName
     */
    public String getEmpId() {
        return empId;
    }

    /**
     * Set the value of empName
     *
     * @param empName new value of empName
     */
    public void setEmpId(String empName) {
        this.empId = empName;
    }

    /**
     * Get the value of name
     *
     * @return the value of name
     */
    public String getName() {
        return name;
    }

    /**
     * Set the value of name
     *
     * @param name new value of name
     */
    public void setName(String name) {
        this.name = name;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final ListObject other = (ListObject) obj;
        if ((this.name == null) ? (other.name != null) : !this.name.equals(other.name)) {
            return false;
        }
        if ((this.empId == null) ? (other.empId != null) : !this.empId.equals(other.empId)) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int hash = 3;
        return hash;
    }

    @Override
    public String toString() {
        return this.name;
    }
}
